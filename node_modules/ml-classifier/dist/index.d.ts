import * as tf from '@tensorflow/tfjs';
import { IImageData } from './translateImages';
import { IParams, IArgs } from './types';
declare class MLClassifier {
    private pretrainedModel;
    private model;
    private callbacks;
    private args;
    private data;
    constructor(args: IArgs);
    private callbackFn;
    private init;
    private loaded;
    private cropAndActivateImage;
    private getInputDims;
    private getData;
    getModel: () => any;
    addData: (origImages: (string | tf.Tensor<tf.Rank> | IImageData | HTMLImageElement)[], origLabels: string[], dataType?: string) => Promise<void>;
    clearData: (dataType?: string | undefined) => Promise<void>;
    train: (params?: IParams) => Promise<any>;
    predict: (origImage: string | tf.Tensor<tf.Rank> | HTMLImageElement, label?: string | undefined) => Promise<any>;
    evaluate: (params?: IParams) => Promise<any>;
    save: (handlerOrURL?: string | undefined, params?: IParams) => Promise<any>;
}
export default MLClassifier;
export { PRETRAINED_MODELS_KEYS as PRETRAINED_MODELS } from './loadPretrainedModel';
